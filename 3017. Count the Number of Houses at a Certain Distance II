#include <stdlib.h>
#include <string.h>

#define min(a,b) ((a) < (b) ? (a) : (b))
#define max(a,b) ((a) > (b) ? (a) : (b))

long long* countOfPairs(int n, int x, int y, int* returnSize) {
    *returnSize = n;
    long long* result = (long long*)malloc(n * sizeof(long long));
    memset(result, 0, n * sizeof(long long));
    
    // Ajustar x e y para base 0
    x--;
    y--;
    if (x > y) {
        int temp = x;
        x = y;
        y = temp;
    }
    
    // Atualizar array de diferen√ßas
    for (int i = 0; i < n; i++) {
        result[0] += 2;
        int idx1 = min(abs(i - x), abs(i - y) + 1);
        if (idx1 < n) result[idx1]++;
        int idx2 = min(abs(i - y), abs(i - x) + 1);
        if (idx2 < n) result[idx2]++;
        int idx3 = min(abs(i - 0), abs(i - y) + 1 + abs(x - 0));
        if (idx3 < n) result[idx3]--;
        int idx4 = min(abs(i - (n - 1)), abs(i - x) + 1 + abs(y - (n - 1)));
        if (idx4 < n) result[idx4]--;
        int idx5 = max(x - i, 0) + max(i - y, 0) + ((y - x) + 0) / 2;
        if (idx5 < n) result[idx5]--;
        int idx6 = max(x - i, 0) + max(i - y, 0) + ((y - x) + 1) / 2;
        if (idx6 < n) result[idx6]--;
    }
    
    // Calcular soma de prefixo
    for (int i = 1; i < n; i++) {
        result[i] += result[i-1];
    }
    
    return result;
}
